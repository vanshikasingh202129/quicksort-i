//iterative quicksort
#include <iostream>
#include <stack>
#include <vector>
#include <algorithm>
using namespace std;
 
int partition(int a[], int start, int end)
{
    
    int pivot = a[end];
    int pIndex = start;
 
  
    for (int i = start; i < end; i++)
    {
        if (a[i] <= pivot)
        {
            swap(a[i], a[pIndex]);
            pIndex++;
        }
    }
 
   
    swap (a[pIndex], a[end]);
 
    
    return pIndex;
}
 
// Iterative Quicksort routine
void iterativeQuicksort(int a[], int n)
{
    
    stack<pair<int, int>> s;
 
   
    int start = 0;
    int end = n - 1;
 
   
    s.push(make_pair(start, end));
 
    while (!s.empty())
    {
        start = s.top().first, end = s.top().second;
        s.pop();
 
        int pivot = partition(a, start, end);
 
        
        if (pivot - 1 > start) {
            s.push(make_pair(start, pivot - 1));
        }
 
        if (pivot + 1 < end) {
            s.push(make_pair(pivot + 1, end));
        }
    }
}
 
// Iterative Implementation of Quicksort
int main()
{
    int a[] = { -8, 5, -3, 1, 7, 4, 6, 2, -4};
    int n = sizeof(a) / sizeof(a[0]);
 
    iterativeQuicksort(a, n);
 
    // print the sorted array
    for (int i = 0; i < n; i++) {
        cout << a[i] << " ";
    }
 
    return 0;
}





